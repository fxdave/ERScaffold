<%

let contextcamel = Formatter.upperCamelCase(Formatter.plural(entity.context))
let appcamel = Formatter.upperCamelCase(APPNAME)
let appsnake = Formatter.snakeCase(APPNAME)
let entitycamel = Formatter.upperCamelCase(entity.name)
let entitypluralsnake = Formatter.snakeCase(Formatter.plural(entity.name))
let entitysnake = Formatter.snakeCase(entity.name)

let meta = {
	extends: {
		fileName: "lib/" + appsnake + "_web/controllers/" + entitysnake + "_controller.ex",
		section: "# methods",
		place: "after"
	},
	depends_on: [
		{ template: "./controller.template.ejs", data: {entity: entity} }
	]
} 

%>

def update(conn, %{"id" => id, "<%= entitysnake %>" => <%= entitysnake %>_params}) do
	<%= entitysnake %> = <%=contextcamel %>.get_<%= entitysnake %>!(id)

	case <%=contextcamel %>.update_<%= entitysnake %>(<%= entitysnake %>, <%= entitysnake %>_params) do
	{:ok, <%= entitysnake %>} ->
		conn
		|> put_flash(:info, "<%= entitycamel %> updated successfully.")
		|> redirect(to: Routes.<%= entitysnake %>_path(conn, :show, <%= entitysnake %>))

	{:error, %Ecto.Changeset{} = changeset} ->
		render(conn, "edit.html", <%= entitysnake %>: <%= entitysnake %>, changeset: changeset)
	end
end