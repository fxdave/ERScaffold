<%

let meta = {
	creates: {
		fileName: "lib/" + Formatter.snakeCase(APPNAME) + "/"+ Formatter.snakeCase(entity.context) +"/"+ Formatter.snakeCase(entity.name) +".ex"
  },
  depends_on: [
    {template: "../migration/migration.template.ejs", data: {entity: entity}}
  ]
}

let appcamel = Formatter.upperCamelCase(APPNAME)
let contextcamel = Formatter.upperCamelCase(entity.context)
let entitycamel = Formatter.upperCamelCase(entity.name)
let entitypluralsnake = Formatter.snakeCase(Formatter.plural(entity.name))

let props = entity.getProps().filter(prop => prop.getName() != "ID")

function fmtName(propName) {
    return Formatter.snakeCase(propName)
}

%>

defmodule <%=appcamel %>.<%=contextcamel %>.<%=entitycamel %> do
  use Ecto.Schema
  import Ecto.Changeset


  schema "<%=entitypluralsnake %>" do
    <% props.forEach(function(p) { %>
    field :<%= fmtName(p.getName()) %>, :<%= p.getType() %>
    <% }) %>

    timestamps()
  end

  @doc false
  def changeset(${ Formatter.snakeCase(entity.name) }, attrs) do
    ${ Formatter.snakeCase(entity.name) }
    |> cast(attrs, [<%= props.map(p => `:${fmtName(p.getName())}`).join(", ") %>])
    <% props.forEach(function(p) { %>
    |> validate_required([:<%= fmtName(p.getName()) %>])
    <% }) %>
  end
end
