<%

let contextcamel = Formatter.upperCamelCase(entity.context)
let appcamel = Formatter.upperCamelCase(APPNAME)
let appsnake = Formatter.snakeCase(APPNAME)
let entitycamel = Formatter.upperCamelCase(entity.name)
let entitypluralsnake = Formatter.snakeCase(Formatter.plural(entity.name))
let entitysnake = Formatter.snakeCase(entity.name)
let entitynormal = Formatter.normal(entity.name)

let meta = {
	extends: {
		fileName: "lib/" + appsnake + "_web/controllers/" + entitysnake + "_controller.ex",
		section: "# methods",
		place: "after"
	},
	depends_on: [
		{ template: "./controller.template.ejs", data: {entity: entity} }
	]
} 

%>

def create(conn, %{"<%=entitysnake %>" => <%=entitysnake %>_params}) do
  case <%=contextcamel %>.create_<%=entitysnake %>(<%=entitysnake %>_params) do
	{:ok, <%=entitysnake %>} ->
	  conn
	  |> put_flash(:info, "<%=entitynormal %> created successfully.")
	  |> redirect(to: Routes.<%=entitysnake %>_path(conn, :show, <%=entitysnake %>))

	{:error, %Ecto.Changeset{} = changeset} ->
	  render(conn, "new.html", changeset: changeset)
  end
end
